What is Node.js?
 - Node allows us to run javascript on the server or directly on the system as well. We 
 can run the javascript files on the browser using V8 enginer which compiles JS into machine
 code during runtime. This V8 engine is also wrapped inside the Node and Node is written in C++
 so it can be run on the computer as well. 

 Node features:
 - Read and write files on a computer
 - Connect to a database
 - Acts as a server for content

Advantages
- No need to learn an extra language for server
- Can share code between front and back end
- Node.js has massive community behind it
- Huge amount of third-party packages & tools to help

Global Object
- It is already available and methods need not be preceded by the Object
        - setTimeout displays the result after a delay of time that has been setTimeout
        - setInterval will keep displaying the result after each interval


__dirname => this gives the absolute path of the folder this file is in
__filename => this gives the absolute path of the folder this file is in along with the __filename


File system
-  import the object " require('fs') "
-  fs.read(path_string, async function) - the async function is executed only after the file is read

Streams
- Start using data, before it has finished loading 
- Situations when there is huge amount of data to be sent to the browser waiting for the entire thing to be
sent would take a lot of time so usually data would be sent as small chunks of data through stream which would
be packaged to what is known as buffer and is sent every time the buffer is filled.
For example: Netflix


Clients & Servers:
1. IP Addresses
        - domain name is used to mask the IP address because IP addresses are hard to memorize
        - when we search for website in the browser the request is then sent to the sever where matching IP address
        is returned. The communication between the browser and server is by using HTTP(set of protocols)
In NodeJS we create a server manually.

2. LocalHost
- localhost is like a domain name on the web
- localhost ip address -> 127.0.0.1 whhich points back to the computer
- this means that when we are connecting to localhost on the browser we are connecting back to our own computer
- here we will use our computer itself as the host

3. PortNumber
- They act like doors into a computer
- different programs use different port numbers to communicate with the browser
- for local development we generally use 3000

4. Creating server
// createServer() holds a parameter which is a callback function which is fired
// everytime some request comes in to the server
// req holds the address where the request is coming from ie the url
// res is what we send back based on the req we recieve

5. Response Headers
// response headers give browser little info about what info is coming back to it
// set header content type
// res.setHeader("Content-Type", "text/plain");

6. Status Codes
- It describes the type of response sent to the browser
- Examples
        - 200 - OK
        - 301 - Resourced moved
        - 404 - Not found
        - 500 - Internal server error
- 100 Range - Informational responses for browser
- 200 Range - success code
- 300 Range - codes for redirects
- 400 Range - user or client error codes
- 500 Range - server error codes

7. Redirects
Imagine using a page as about-me and then you wanted to change it to just /about and there are
a lot of people still using the previous version this is when redirects comes into play. Redirects
helps in resolving this and give the same output as before. It identifies the previous version and 
points out to the same old site though it has been changed

Using switch case for redirects or for switching pages isn't a good practice as the could would Start
becoming messy instead we will be using express. 

8. NPM - Node Package Manager
nodemon - helps with development workflow and wont have to keep restarting manually
-g means globally which means this could be used for other projects as well and not specific to this alone
- to create the package.json file we have to used "npm init"
- package-lock.json => it keeps track of different dependency versions installed in our project
- utility library lodash
- whenever we install a node package locally a node_modules folder is automatically created where all packages are kept

9. Dependencies
The dependencies used in the project is shown is the package.json file  and when we usually share the code we 
do not include the folder node_modules as it is a large file. So when we get a project that does not have the node node_modules
open up and see the dependencies we have to install. Installing each one by one isn't a good idea 

So use "npm install" which checks for the dependencies in package.json and installs them if not already 

Express is a framework that helps us to easily manage routing, requests and server side logic in much better way making code more readable
Saves time, clean code executed

** View Engines
-> All this while we have been sending static (predefined and no changes) html files back to the browser
- easily possible in express apps
- we will be using EJS(Embedded javascript) to install -> npm install ejs
- ejs tags <% %>
- generally whatever comes between <% %> is not printed in the browser but is used in the server to print it to browser we have to use <%= %> 
- EJS Templates
        - EJS templates are processed through the EJS view engine on the server
        - the ejs file would be sent to the EJS view engine which would look for the dynamic part(loops etc) and render the html part back to the browser
        - this whole process is called as server side rendering
- Partial templates = The part of the templates that can be re-used in multiple files is called Partials
        - Steps to do this
        - create a folder named partials(or any) inside views and check for codes that could be reused in the files of views folder
        - inside the <%- %> type include(path) for include we use '-' inside the <%
        - we used = because "=" skips the escape characters

** MiddleWare
- Code which runs(on the server) between getting a request and sending a response
- basically things that run on the server
- runs from top to bottom unless any function sends back the response in between
- Other things we could do with MiddleWare
        - Logger MiddleWare to log details of every request
        - Authentication check MiddleWare for protected routes
        - MiddleWare to parse JSON data from requests
        - Return 404 pages
- using morgan - 3rd party MiddleWare used for logging
- you can't directly access static files in express for that we use express.static('public'), we place all static files that needs to be accessed in the public folder

** MongoDB and Mongoose
- It is a NoSQL database
- SQL uses tables, rows and columns to store records of data whereas NoSQL uses collections and documents
- collections holds multiple documents of the same type
- after creating collections create an user so that the user can access the database from code so that not everyone can connect to the database 
- To create an user
        - Left side Database access -> add new database user 
- to connect to the db -> connect -> connect your application -> copy the connection string and add to the app file -> change password and database name

- ** Mongoose
        - Mongoose is an ODM library - Object Document Mapping library
        - It wraps the MongoDB api and provides easier way to connect and communicate with the database
        - Schems and Models 
                -Schema  defines the structure of a type of data/document and also the the properties and the property types
                - Example:
                        title (string), required
                        snippet (string),required
                        body (string), required
        -Models allow us to communicate with database collections

- REQUEST TYPES
        - GET requests to get a resource
        - POST requests to create new data (eg new blog)
        - DELETE requests to delete data (eg delete a blog)
        - PUT requests to updatte data